// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// byteplus-sdk-metadata/metadata/iam/2018-01-01/metadata.json
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _byteplusSdkMetadataMetadataIam20180101MetadataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x73\xe2\x36\x14\x3f\x9b\x4f\x91\xf1\x39\x99\xde\x73\xa3\x4b\x60\xd2\x12\x42\x03\xdb\x4b\x67\x0f\xaa\xfd\xd8\xa8\x35\x96\x2b\xc9\xf1\x32\x3b\x7c\xf7\x8e\x2c\x6c\x4b\xb6\x8c\x25\x30\x49\x08\xb9\xc0\x48\xb6\xf4\x9e\x7e\xef\xff\xb3\x7e\x0e\x3c\x7f\x18\x86\x5f\x19\xd0\x25\x99\x50\x92\x26\xfe\xed\xd5\xcf\x81\xe7\xf9\x4f\xf0\x5f\x0a\x8c\xef\x86\x9e\xff\x2b\x62\x38\xf0\x6f\xaf\xfe\x12\x23\xcf\x17\x2b\xf2\xf7\x67\x68\x0d\xfe\x75\x35\x99\x8f\xc5\xf0\xdb\xc0\xf3\xb6\xd7\x72\x2b\x96\x90\x98\x81\xd8\x6b\x3b\xc8\x27\xfd\x21\xe7\x28\x78\x7e\x22\x11\xcc\x49\x84\x83\x8d\x25\x59\xf9\xb2\x4a\x53\xce\x2c\x37\x49\x39\x23\x36\x75\xe2\xa2\x3c\x4b\xef\xac\xe8\x28\xb9\xf0\x73\x12\x56\x2c\xb9\xf8\x42\x01\x71\x18\x06\x01\x30\xf6\x3b\xd8\x32\x61\x41\x20\x5f\xb6\xe0\x34\x0d\x78\x4a\xcb\x19\xcf\xaf\x93\x6a\xee\xae\xbe\x74\x1f\xee\xce\xe4\x15\xac\x8e\x10\x87\x6a\x6e\x01\x01\x05\x5e\xed\x59\x3d\xe0\x88\xa7\xac\x1a\x7f\x4d\xc2\xc6\x62\xed\x14\xf2\x1c\x9e\xb7\x1d\xec\x7e\x74\x84\x5c\xec\x65\x04\x2c\xa0\x38\xe1\x98\xc4\x85\x44\x46\x98\x25\x11\xda\xd4\x0d\xc8\x46\x5f\xda\x80\x2c\xd7\x77\x00\x49\xd2\x98\xdf\x8f\xf6\xc3\xd8\xe4\xd8\xc8\xf3\x1e\x1c\xf5\x93\x74\x80\x39\x25\xdf\x71\x3c\xa7\x64\x85\x23\xb0\xc4\x34\x5f\x32\x8c\x22\x92\x41\x58\x2a\x3e\x62\x2c\x23\xb4\x31\x7e\x02\x06\x5c\xec\x87\x69\xf5\xf2\x02\xad\x60\x98\xf2\xe7\xbb\x1f\xb0\x4e\xf8\x28\xa5\x48\x95\x4f\xf1\x74\x1c\xa1\xef\xf5\x39\x47\xcb\x6a\x93\x97\xe1\xd0\x46\x91\x4d\x11\xe3\xf9\xbb\x3a\xc8\xe5\xf4\x7d\xa2\x4c\x36\x51\xe9\xc0\xc1\x51\xed\x9d\x5c\x93\x41\xef\xe5\xfa\x11\x09\xd2\x35\xc4\x5c\x9f\x3d\x10\x47\x8d\x25\x23\x82\xd6\x1a\x6e\xe4\xce\xe4\x63\x2b\x2f\x4b\x1b\xcb\x15\xf5\xd0\xed\xc3\x02\x5e\x11\xbe\x7a\x75\x2a\x65\x3c\xdc\x8d\x97\x34\x65\xbc\x76\x4c\x77\xc8\x15\x36\x8f\x03\x5c\x6c\xa4\xba\xf4\x1a\xbb\x39\xc3\xb1\x3a\x30\x73\xdf\x81\xea\x62\xf8\x30\x9d\x53\xf2\x82\x43\xa0\x05\xba\xc3\x04\xdf\xc7\x2b\x52\x9e\xf2\x01\xf8\x33\x09\xfd\xdb\x2b\x7f\xfe\xb8\x58\x4a\x92\xfe\x17\x12\x73\x88\x79\x2e\xd1\xdb\x2b\x1f\x25\x49\x84\x83\xdc\x4f\xfc\xf2\xe3\x26\xcb\xb2\x9b\x15\xa1\xeb\x9b\x94\x46\x10\x07\x24\x84\xd0\x57\x50\x74\x15\xde\x9d\xdc\x42\xf0\xfa\x00\x1c\x85\x88\xa3\xba\x99\xa8\xe7\x50\x85\xba\x58\x3c\xaa\x3e\x69\x17\xea\x3a\xc4\x5a\xe3\xa8\x21\x32\x13\x8f\x6e\x0c\x94\x2a\x57\xae\xaf\x19\xc3\xb7\xa6\xa4\x80\xbe\xe0\x00\xa6\x38\xfe\x17\x42\x07\x63\xd8\xad\x73\xca\x71\x84\xdb\xeb\xd5\xd6\xee\xd6\x08\x47\xc5\xe0\x81\xfc\x8d\x23\x98\x3f\x93\xb8\x8f\x58\xa1\xf0\xba\x37\xac\x77\x64\x47\xf6\x61\x5d\x3d\x4b\x31\xbc\x67\x7f\x02\xc5\x2b\x25\xa9\x52\xe9\x35\x0f\xac\x4f\x36\x57\x6b\xa6\x7d\x78\x3e\x36\x82\x08\xdc\x33\x56\x35\xa3\xec\xd6\x18\x49\xe3\xf0\x1a\xc9\x96\xc2\x01\x89\x90\x43\x6e\x2f\x69\x1c\x5a\x5d\xd8\xee\xef\x60\xb6\x0e\xd5\x9a\xdc\xdb\xe4\xc9\xbb\x5c\x43\xdd\x67\xd9\xd2\x72\xf0\x0f\x4e\x32\x78\x0f\xb5\xaf\xe4\xe2\xfd\xd4\xbe\x15\x3f\x6f\x59\xfb\x4e\x80\x9f\xc2\xc4\xf7\x39\xf5\xb3\x2b\xd8\x26\xc0\x4f\xe3\xa4\xda\x50\x3a\xb3\x32\x69\x02\xbc\x3f\x15\x76\x47\xeb\x63\x14\x43\x13\xe0\xfd\x46\x91\x36\xb8\xce\xa6\x90\x99\x00\x3f\x6d\xec\x33\x2d\x7f\xeb\x9a\x60\x02\xbc\xdf\x20\xbc\xcf\x13\x7f\xa6\xd7\x66\xcd\x9b\x62\x56\xf5\x53\xd9\x2b\xf6\x83\x8b\x2a\xb8\x9f\xbe\x70\x6f\xed\xdf\x1c\x8f\xbc\x55\x2f\x2b\xd4\xdc\x8a\x31\xd8\x22\x73\x84\xb3\x2a\xa8\x4a\xbf\x61\x05\x4f\xbe\xc2\xda\xd7\xbb\xf8\x74\x6b\x8c\xf4\x24\xd3\x1e\xa8\x63\xb3\xab\xf3\x45\xeb\x00\xa0\x2e\x02\xa3\xbb\x98\x63\x8e\x81\x8d\x89\x5b\x95\x90\xaf\xdb\x8c\x71\xc4\x81\x16\x51\x67\x8a\xd7\xb8\xec\xab\x3d\xae\x56\x0c\x4c\xcd\x68\xe7\x8c\xac\xfe\x91\xa2\x9d\xca\x92\x70\x14\xc9\xed\xae\xdb\xc4\x23\xe9\x0a\x8f\xc1\x7a\x91\x89\xe6\x7b\x0a\xc2\x46\xd2\x25\xf1\x45\x40\x12\x75\xba\x49\xde\xcc\x80\xbe\x81\x96\x05\x8a\x47\x94\xfc\x03\x01\x37\x85\xc6\xea\xa9\xc2\x69\xa1\x16\x3b\xc5\x28\xfe\xb6\x9a\x7c\x4a\x87\xd1\x0f\x58\xe6\xe2\xc9\x54\x28\x7d\x3c\x18\x4f\x8c\xe0\x87\x02\xcf\xe4\xa9\x34\x35\xec\xfc\x92\xd9\xee\x24\xfe\x48\x81\x6e\x5e\xd7\xe7\x58\x5a\xd1\x3b\xeb\x4a\x54\xa0\x8f\x09\x75\xa8\x19\x3a\xb1\xb7\x6f\x22\xbd\x99\x2c\xec\x41\xfe\x8d\xd4\xbb\x23\x8e\x10\x3b\x66\x26\x7b\x8e\x2f\x6d\xfa\x0d\xa2\xa9\x4d\x92\x73\x0e\x2d\x12\x21\x0e\x35\x33\x38\x2f\x2f\x23\x38\xef\x55\x12\xa7\xee\xbf\x08\xb8\xd5\x4e\xc7\x31\xb0\xbf\x2a\xd2\x26\xa6\x8f\x83\xba\xa5\xe1\xd3\x68\xf9\x18\xaa\xee\xb6\x96\x44\x27\xf4\x6a\x52\x72\x5e\x9a\x2e\x38\xb7\xec\x64\x5c\x74\x8b\x29\x97\xf0\x98\x50\x97\x0f\x30\x7b\x44\xe3\xd4\x3d\xe8\x5f\xe2\x27\x0d\xd8\xdd\x80\x3e\xc1\x9a\xbc\xe4\x1f\x30\xc7\x94\xac\x5f\xf3\x6a\xaf\x54\x82\x63\x3e\xc6\x17\x09\x42\xd7\x25\x16\x9d\xa2\xcb\x19\x67\x90\x19\xfa\xd8\x62\xb6\x21\x03\x31\xdb\x0a\xc9\xc5\x7d\xfb\x93\xcb\x3f\x2f\x6b\xbe\xff\xaf\x90\x52\x52\x4e\x5d\xb2\x56\xab\x30\x5f\xd9\x2c\x1f\x34\x1b\x65\x17\x7d\x8f\x53\xbe\xd7\xfb\x3d\xce\x19\x64\xf5\xab\x9c\xc7\x5d\xed\xd4\xf9\x3d\x8b\x1b\x92\x33\xc8\x2e\xfc\x92\xa4\x7c\xe4\xd0\xdf\x70\x0c\x75\xda\x0d\xc6\x19\x64\x86\x4b\x8c\xbb\x80\xe8\x98\x1e\xec\x0b\x83\x9f\x59\x71\xd3\x93\x0c\xb6\xff\x07\x00\x00\xff\xff\xf7\x2d\x6b\xc1\x9d\x35\x00\x00")

func byteplusSdkMetadataMetadataIam20180101MetadataJsonBytes() ([]byte, error) {
	return bindataRead(
		_byteplusSdkMetadataMetadataIam20180101MetadataJson,
		"byteplus-sdk-metadata/metadata/iam/2018-01-01/metadata.json",
	)
}

func byteplusSdkMetadataMetadataIam20180101MetadataJson() (*asset, error) {
	bytes, err := byteplusSdkMetadataMetadataIam20180101MetadataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "byteplus-sdk-metadata/metadata/iam/2018-01-01/metadata.json", size: 13725, mode: os.FileMode(420), modTime: time.Unix(1693379221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"byteplus-sdk-metadata/metadata/iam/2018-01-01/metadata.json": byteplusSdkMetadataMetadataIam20180101MetadataJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"byteplus-sdk-metadata": &bintree{nil, map[string]*bintree{
		"metadata": &bintree{nil, map[string]*bintree{
			"iam": &bintree{nil, map[string]*bintree{
				"2018-01-01": &bintree{nil, map[string]*bintree{
					"metadata.json": &bintree{byteplusSdkMetadataMetadataIam20180101MetadataJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
